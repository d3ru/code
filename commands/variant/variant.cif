# variant.cif
# 
# Copyright (c) 2010 Accenture. All rights reserved.
# This component and the accompanying materials are made available
# under the terms of the "Eclipse Public License v1.0"
# which accompanies this distribution, and is available
# at the URL "http://www.eclipse.org/legal/epl-v10.html".
# 
# Initial Contributors:
# Accenture - Initial contribution
#

==name variant

==short-description

Determines the hardware variant and whether or not that matches the variant specified via the command line.

==long-description

If the device matches the given command line options, KErrNone is returned. If not, KErrNotSupported is returned. Note that the command will not print any error message in the case of the variant not being supported, so that it doesn't make script output untidy. If an error message is required, use the C<--verbose> option.

In addition there are some other special variant names supported, that are derived at compile time from the platform.mmh macros and similar: run the tool with no arguments to see the full list.

Example usage:

    variant h4 && do-something-h4-specific
    variant wins && do-something-emulator-specific
    variant h4 h6 && do-something-for-h4-and-h6

If no arguments are specified, all the supported and understood variants are listed.

==option uint u uid multiple

Test whether the device matches any of the specified machine UIDs.

==option bool v verbose

Display verbose output.

==option bool l list

Has no effect, kept for compatability.

==argument string variantname optional multiple

A symbolic name for the hardware variant may be specified instead of having to know the machine uid. This maximises compatibility with platforms that provide a custom variant.exe and/or that need more than just the machine UID to determine the variant. Check the platform-specific documentation for what variant string is used to identify that platform's hardware. If multiple variant names are specified KErrNone is returned if any one of them matches.

==copyright

Copyright (c) 2008-2010 Accenture. All rights reserved.

==smoke-test

variant $Quiet

# One of these has to be true
variant wins || variant target || $Error
# But they can't both be
variant wins && variant target && $Error

# There used to be a memory leak when using --uid
variant --uid 1234 && $Error
