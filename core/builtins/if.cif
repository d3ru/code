# if.cif
# 
# Copyright (c) 2011 Accenture. All rights reserved.
# This component and the accompanying materials are made available
# under the terms of the "Eclipse Public License v1.0"
# which accompanies this distribution, and is available
# at the URL "http://www.eclipse.org/legal/epl-v10.html".
# 
# Initial Contributors:
# Accenture - Initial contribution
#

==name if

==short-description

Support for conditional execution in fshell scripts.

==long-description

Execute all the following statements (up until an C<else> or C<endif> statement) if the C<condition> evaluates to KErrNone. The semantics are the same as for C-style C<if (condition) {...} else {...}> statements. For example:

    if var ERR == 0
        echo "No error!"
    endif

One or more C<else> statements are allowed, as are multiple statements in each block:

    if var ERR == 0
        echo "No error!"
        source DoSomethingElse.script
    else if var ERR == -5
        echo "Not supported."
    else if var ERR == -14
        echo "In use."
    else
        error $ERR "Unrecognised error!"
    endif

Multiple statements are allowed in an if condition by using the && and || pipeline operators - note however that the condition must be quoted in this case, to make sure the pipeline is associated with the condition not the command itself:

    if 'var ERR == -5 || var ERR == -47'
        echo "Not supported"
    endif

As with the L<while|while> command, the C<if>, C<else> and C<endif> statements cannot be backgrounded, redirected or participate in pipelines. In other words they must appear on a line by themselves (although comments and whitespace are permitted on that line).

Nested if and while blocks are permitted providing there are the correct number of endif/endwhile statements. Modifications to the environment within the if or else statements are visible outside the block. In other words there is no scoping associated with the block.

The C<if> command is only for use in scripts - behaviour is undefined if you type it in at an interactive command prompt.

==argument string condition last

Execute the following statements if the given condition statement evaluates to 0 (KErrNone).

==see-also

L<else|else>, L<endif|endif>, L<while|while>

==copyright

Copyright (c) 2011 Accenture. All rights reserved.

==smoke-test

# Basic
export I 0
if var NONEXISTANT defined
    $Error
endif

if var NONEXISTANT defined
    $Error
else
    export I 1
endif
var I == 1 || $Error

export I 0
if var NONEXISTANT not-defined
    export I 1
else if var I == 0
    # This shouldn't execute even though the above clause is true, because the first clause executed
    $Error
else
    # Nor should this one
    $Error
endif
var I == 1 || $Error

# Test nested ifs
export I 0
if var I == 0
    var I add 1
    if var I == 0
        $Error
    else
        export J 0
        while var J != 10
            var I add 1
            var J add 1
        endwhile
        var J == 10 || $Error
        var I add 1
    endif
    var I == 12 || $Error
    var I add 1
endif
var I == 13 || $Error

# These shouldn't crash, but should return an error
if nonexistantcommand $Silent && $Error

# The above if returned an error so this else isn't associated with it. Bit weird but we're breaking our own rule about not putting conditionals into pipelines so what the hey, trust me.
else $Silent && $Error
endif $Silent && $Error

# Check that a negative in the first part of a conditional using && prevents execution of both the second bit of the conditional and the body
if "var NONEXIST defined && error"
    $Error
endif

# Create a separate script file to test whether exit is being handled correctly within conditionals - the exit should not trigger, so if OK doesn't get defined then that's a bug
export OK 0
echo "if var nonexist defined"  > iftest.script
echo "    exit"                >> iftest.script
echo "endif"                   >> iftest.script
echo "export OK 1"             >> iftest.script
source iftest.script
rm iftest.script
var OK == 1 || $Error
