# var.cif
# 
# Copyright (c) 2010 - 2011 Accenture. All rights reserved.
# This component and the accompanying materials are made available
# under the terms of the "Eclipse Public License v1.0"
# which accompanies this distribution, and is available
# at the URL "http://www.eclipse.org/legal/epl-v10.html".
# 
# Initial Contributors:
# Accenture - Initial contribution
#

==name var

==short-description

Perform an operation involving environment variables.

==long-description

This command returns zero (KErrNone) in the success case, and a non-zero positive code otherwise. Usage:

    var SOMETHING defined # Doesn't cause an error, returns '1'
    var SOMETHING defined && echo Defined # Nothing is echoed
    export SOMETHING 1
    var SOMETHING defined && echo Defined # "Defined" will be printed
    var SOMETHING == 1 && echo "Equal" # "Equal" will be printed
    var SOMETHING add 3 && echo "$SOMETHING" # $SOMETHING now has value "4"
    var SOMETHING lt 10 && echo "Less than 10" # "Less than 10" will be printed

C<==> and C<!=> are text comparisons not numerical, and all environment variables are strings, so the following will I<not> work:

    export VAL 16
    var VAL == 0x10 && echo Equal # Error! "16" does not equal "0x10"

The numerical comparison operators are named C<lessthan>, C<greaterthan> etc (with abbreviations like C<lt>, C<le>) because the C<E<lt>> and C<E<gt>> operators are reserved for stdio redirection.

==argument string variable

The environment variable to be operated on.

==argument enum operation

The operation to be performed.

==enum-value defined

Test if the specified environment variable is defined.

==enum-value not-defined

Opposite of C<defined>.

==enum-value ==

Tests if the specified environment variable is an exact string match for the supplied argument.

==enum-value !=

Opposite of C<==>.

==enum-value add

Assume that the specified environment variable holds an integer, and adds the value given by the argument to it. If the variable isn't defined or doesn't contain a decimal integer, it is assumed to have value zero.

==enum-value subtract

Subtracts the given value from the environment variable. Semantics as per add.

==enum-value multiply

Multiply the specified environment variable by the given value.

==enum-value startswith

Tests if the specified environment variable starts with the supplied argument.

==enum-value endswith

Tests if the specified environment variable ends with the supplied argument.

==enum-value lessthan

Tests if the specified environment variable is numerically less than the supplied argument.

==enum-value lt

Abbreviation for lessthan.

==enum-value lessorequal

Tests if the specified environment variable is numerically less than or equal to the supplied argument.

==enum-value le

Abbreviation for lessorequal.

==enum-value greaterthan

Tests if the specified environment variable is numerically greater than the supplied argument.

==enum-value gt

Abbreviation for greaterthan.

==enum-value greaterorequal

Tests if the specified environment variable is numerically greater than or equal to the supplied argument.

==enum-value ge

Abbreviation for greaterorequal.

==argument string argument optional

The argument to the operation.

==copyright

Copyright (c) 2006-2011 Accenture. All rights reserved.

==smoke-test

# Some further tests for things not covered by fshell-basic-test.script

export N 5
var N multiply 2
var N == 10 || $Error

export V "Something amazing"
var V startswith Some || $Error
var V startswith Incredible && $Error

var V endswith zing || $Error
var V endswith Some && $Error

var N lessthan 11 || $Error
var N lessthan 9 && $Error
var N lt 10 && $Error
var N gt 10 && $Error
var N lessorequal 10 || $Error
var N le 10 || $Error
var N greaterorequal 10 || $Error
var N ge 10 || $Error
var N ge 11 && $Error
